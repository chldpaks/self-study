<<html>>
파일 열기 : ctrl + o
진하게 만드는 태그 : <strong></strong>
UNDERLINE TAG : <u></u>
HTML HEADING TAG : <h1></h1>
element creates a line break tag : <br></br>
html paragraph tag : <p></p>
br, p태그를 비교했을때 웹페이지를 정보로써 가치 있게 만들기 때문에 p태그를 쓰는게 더 좋은 결정이다.
단락이다라는 것을 의미론적으로 표현해줄수 있다. 단 단점이 정해진 여백만큼 벌어져있기 때문에 시각적으로 떨어진다.
어디서 어디까지가 같은 단락이다라는 것을 표현 할 수 있고 시각적으로 부족한 부분은 css를 통해서 훨씬 더 정교하게
표현할수 있기때문에 의미에 맞는 태그를 쓰는게 좋은 방법이다.

ctrl + 클릭 : 커서 여러곳 생기기
li 태그는 반드시 부모태그(ul)를 가지고 있다.
ol, ul 태그의 공통점 l 즉 list를 가지고 있다. 차이점은 o는 Ordered List u는 Unorderd List
title 태그는 web page의 제목을 사용자에게 명시적으로 알릴수있다.
charset는 'character'는 문자라는 뜻이고 'set'는 규칙이라는 뜻이다. 즉 'utf-8로 문서를 읽어라' 라고 
브라우저에게 예기를 해준거다.

본문은 body라는 태그로 묶고 body를 설명하는 태그는 head태그로 묶기로 한다. 상당히 고위직 태그라고 할 수 있다.
고위직 태그들을 감싸는 단 하나의 최고위층 태그가 있는데 그것이 바로 html 태그이다.
html태그 위에 관용적으로 이 문서는 html이다라는 뜻에서 <!doctyp html> 이라고 써주면 된다.

HTML(HyperText Markup Langague)
HyperText 태그는 무엇일까? anchor의 첫번째 글자를딴 <a>이다. 배가 정박할때 사용하는 닷을 의미한다. 

정보의 바다에 정박한다 의미의 시적인 표인인 <a>태그는 링크라는 기능을 표현한다.
href속성은 h는 하이퍼텍스트가 링크 ref는 참조
target="_blank" : 새탭으로 열기

Internet VS WEB 
: 두가지는 다르다. 인터넷이라는 전체안에 웹이라는 부분이 존재

인터넷에연결된 컴퓨터 하나하나를 HOST라하고 이런 컴퓨터를 빌려주는 사업을 HOSTING이라 한다. 
요즘에는 CLOUD라 불린다. 호스팅중에서 컴퓨터의 웹서버와 같이 웹을 동작하기위해 필요한 소프트웨어들까지
설치해서 빌려주는 비지니스를 WEB HOSTING이라 불린다. 그 중 GitHub가 있다.

웹브라우저는 제품명이 아니라 제품군이다. 웹서버도 마찬가지이다. 예를들어 Apache, IIs, Nginx 등등 
http://127.0.0.1:8887/index.html
http -> Hyper Text(웹페이지) Transfer(전송) Protocol(통신규칙) : 웹페이지를 전송하기 위해서 고안된 통신규칙
127.0.0.1 -> Internet Protocol Address : 컴퓨터와 컴퓨터가 서로 통신할때 사용하는 주소체계

WAMP : Window Apahce MySQL PHP 의 약자로 윈도우에서 3가지를 한방에 설치하는 모듈 

htdocs : 'hypertext documents'의 약자 즉 웹페이지가 저장된 곳이라는 뜻
127.0.0.1 : Internet Protocol Address이며 웹 브라우저가 설치되어 있는 각자의 컴퓨터를 가리키는 약속된 주소

http로 시작한 주소로 입력하면 컴퓨터에 웹 브라우저와 웹 서버가 있을때 웹 브라우저가 웹 서버에게 요청한다. 그러면 웹 서버가 index.html 파일을 열어서 웹 브라우저에게 전송하는것
file로 시작한 주소로 입력하면 이 컴퓨터 안에서는 웹 서버는 이 과정에 개입하지 않는다. 웹 브라우저가 직접 index.html 파일을 읽어서 화면에 열어주는것이다.
http:// 와 file:// 차이는? 
file://는 파일에 있는 걸 직접 여는것이고 
http라고 하는 것은 웹 브라우저와 웹 서버가 서로 통신할 때 사용하는 통신 규약인 HyperText Transfer Protocol을 이용해서 데이터를 가져오는 것이다.
즉 웹 페이지를 웹 브라우저와 웹 서버가 서로 주고 받기 위한 약속을 바로 http라는 것이다.
서로 다른 컴퓨터에 있는 웹 브라우저와 웹 서버가 통신을 하기 위해서는 반드시 http를 사용해야 한다.

웹 브라우저가 웹 서버에 요청을 할 때는 웹 서버의 주소, IP Address가 필요하다.


<<css>>
font tag : 웹에대해서 어떠한 정보도 가지고 있지 않다. 다만 디자인을 나타낼 뿐이다.
css를 사용하는 이유는 ? 
중복된 코드를 단 하나의 코드를 통해서 중복을 제거할 수 있다. 
유지보수를 훨씬 더 편리하게 할 수 있으며 가독성도 훨씬 더 높아진다.

웹페이지 안에 CSS를 삽입하는 2가지 방법 ?
1. style 태그를 쓴다
2. style 속성을 쓴다
디스크립션이 시작도고 끝나는 것을 구분하기 위해 구분자로 세미콜론이라는 것이 존재한다.
효과를 지정한 다음에는 끝에 항상 세미콜론을 적어준다.

이 웹페이지의 모든 saw라는 이름의 태그를 선택하는 선택자이기 때문에 class 값이 saw인 태그인데 
그 때 사용하도록 약속된 특수한 기호가 바로 점(.) 이다. class가 saw인 태그를 가리키는 선택자가 된다.
똑같은 형태의 선택자라 한다면 가장 마지막에 등장하는 선택자가 우선순위가 높다.
ID 선택자 > 클래스 선택자 > 태그 선택자
클래스 선택자는 태그 선택자보다는 우선순위가 높지만 ID 선택자보다는 우선 순위가 낮다.
왜?? 즉 id의 값은 단 한 번만 등장해야 된다. 좀 더 구체적인 것을 포괄적인 것보다 우선순위를 높였다.
디자인하고 코딩하는데 훨씬 더 효율적이기 때문이다. 

h1 태그는 화면 전체를 쓴다. a 태그는 화면 전체를 쓰지 않고 자기 콘텐츠만큼의 부피를 쓴다.
화면 전체를 쓰는 태그들을 'block level element'
자기 콘텐츠만큼의 갖는 태그들을 'inline element'라고 부른다.
즉 block level element와 inline element는 display라는 속성의 기본값일 뿐 그 기본값은 CSS를 통해서 언제든지 바꿀 수 있다.

선택자에서 콤마라고하는 선택자를 통해서 코드의 양을 획기적으로 줄일 수 있다.
콘텐츠와 테두리 사이에 여백을 주고 싶다면 padding이라는 값을 준다.
테두리와 테두리 사이 간격을 조정 해주고 시다면 margin이라는 값을 준다.
안쪽은 padding, 밖에는 margin 이라는 것을 볼 수 있다.

ol 태그는 화면 전체를 쓰는 block level element 때문에 이 element의 끝에 오른쪽 테두리에 가 있는 것이다.
그럴려면 width 값을 지정해서 ol 태그의 폭을 지정하면 된다.

div 태그는 block level element이기 때문에 화면 전체를 쓴다.
span 태그는 inline element이다.
두 개의 태그를 나란히 배치를 하고싶으면 그것을 감싸는 부모 태그가 필요하다.
gird-template-columns : 하나의 컬럼에 배치. 
fr 단위라는 것은 화면 전체를 쓰게 자동으로 조정되는 단위이다.
grid는 텍스트가 많아짐에 따라 자동으로 커진다라는 특징이 있다.  

반응형 디자인이란 화면의 크기에 따라서 웹 페이지의 각 요소들이 반응해서 동작하게 된다.
여러가지 화면의 특성들에 따라서 어떠한 조건을 만족할 때만 CSS의 내용이 동작하도록 하는 것이 미디어 쿼리라 부른다.

style.css라는 별도의 파일에 저장된 CSS를 다운로드 받아서 여기에 원래 그 코드가 있었던 것처럼 동작해라고
얘기해주는 것을 link 태그이다. 이 웹페이지가 어떤 CSS파일과 연결되어 있는지를 웹브라우저에게 알려줄 수 있다.
캐싱이라고 하는 것은 저장하다라는 뜻인데 즉, 한번 style.css라는 파일을 다운 받았다면 저 파일이 바뀌기 전까지는
style.css 파일을 이 웹브라우저는 컴퓨터에 저장해놨다가 요청하면 저장된 결과를 가져와서 속도를 높일 수 있고
사업자들은 돈을 덜 쓸 수 있는 중요한 효과를 얻게된다. 
캐시로 인해서 결국에는 훨씬 더 빠르게 웹페이지를 보여줄 수 있으면서 네트워크 트래픽, 다시 말해 사용료를 훨씬 더 
적게 낼 수 있다.